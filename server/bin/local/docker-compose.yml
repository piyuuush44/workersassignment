version: '3.7'

services:
  db-server:
    container_name: db-server
    image: mongo:latest
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    ports:
      - "27017:27017"
    volumes:
      - dbdata:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $MONGO_USERNAME -p $MONGO_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  redis-server:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redisdata:/data/redis

  elastic-server:
    container_name: elastic-server
    image: docker.elastic.co/elasticsearch/elasticsearch:7.0.1
    volumes:
      - esdata:/data/esdata
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    logging:
      driver: none
    ports:
      - "9300:9300"
    networks:
      - app-network

  api-server:
    container_name: api-server
    build:
      context: ../..
      dockerfile: ./bin/local/Dockerfile
    env_file: .env
    restart: unless-stopped
    volumes:
      - '../..:/opt/api_server/'
      - '../../package.json:/opt/api_server/package.json'
      - '../../node_modules:/opt/api_server/node_modules'
    command:
      - './bin/local/service_start.sh'
    ports:
      - "3000:3000"
    networks:
      - app-network
    links:
      - db-server
      - redis-server
      - elastic-server

networks:
  app-network:
    driver: bridge

volumes:
  esdata:
  redisdata:
  dbdata:
  node_modules:
